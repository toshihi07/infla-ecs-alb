# aws_appautoscaling_policy.cpu_scaling_policy:
resource "aws_appautoscaling_policy" "cpu_scaling_policy" {
    alarm_arns         = [
        "arn:aws:cloudwatch:ap-northeast-1:081670647694:alarm:TargetTracking-service/my-cluster/api-service-AlarmHigh-1a7affa7-eac9-42b6-9482-4cbf54f3b6f8",
        "arn:aws:cloudwatch:ap-northeast-1:081670647694:alarm:TargetTracking-service/my-cluster/api-service-AlarmLow-29b148d7-be2d-4261-887f-f45126a8afcb",
    ]
    arn                = "arn:aws:autoscaling:ap-northeast-1:081670647694:scalingPolicy:d94665d8-0dbe-4929-a475-0e1ba7fe4bbc:resource/ecs/service/my-cluster/api-service:policyName/cpu-scaling-policy"
    id                 = "cpu-scaling-policy"
    name               = "cpu-scaling-policy"
    policy_type        = "TargetTrackingScaling"
    resource_id        = "service/my-cluster/api-service"
    scalable_dimension = "ecs:service:DesiredCount"
    service_namespace  = "ecs"

    target_tracking_scaling_policy_configuration {
        disable_scale_in   = false
        scale_in_cooldown  = 60
        scale_out_cooldown = 60
        target_value       = 70

        predefined_metric_specification {
            predefined_metric_type = "ECSServiceAverageCPUUtilization"
        }
    }
}

# aws_appautoscaling_target.ecs_scaling_target:
resource "aws_appautoscaling_target" "ecs_scaling_target" {
    arn                = "arn:aws:application-autoscaling:ap-northeast-1:081670647694:scalable-target/0ec5d94665d80dbe4929a4750e1ba7fe4bbc"
    id                 = "service/my-cluster/api-service"
    max_capacity       = 4
    min_capacity       = 2
    resource_id        = "service/my-cluster/api-service"
    role_arn           = "arn:aws:iam::081670647694:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
    scalable_dimension = "ecs:service:DesiredCount"
    service_namespace  = "ecs"
    tags_all           = {}

    suspended_state {
        dynamic_scaling_in_suspended  = false
        dynamic_scaling_out_suspended = false
        scheduled_scaling_suspended   = false
    }
}

# aws_ecs_cluster.main:
resource "aws_ecs_cluster" "main" {
    arn      = "arn:aws:ecs:ap-northeast-1:081670647694:cluster/my-cluster"
    id       = "arn:aws:ecs:ap-northeast-1:081670647694:cluster/my-cluster"
    name     = "my-cluster"
    tags_all = {}

    setting {
        name  = "containerInsights"
        value = "disabled"
    }
}

# aws_ecs_service.api_service:
resource "aws_ecs_service" "api_service" {
    availability_zone_rebalancing      = "DISABLED"
    cluster                            = "arn:aws:ecs:ap-northeast-1:081670647694:cluster/my-cluster"
    deployment_maximum_percent         = 200
    deployment_minimum_healthy_percent = 100
    desired_count                      = 2
    enable_ecs_managed_tags            = false
    enable_execute_command             = false
    health_check_grace_period_seconds  = 0
    iam_role                           = "/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
    id                                 = "arn:aws:ecs:ap-northeast-1:081670647694:service/my-cluster/api-service"
    launch_type                        = "FARGATE"
    name                               = "api-service"
    platform_version                   = "LATEST"
    propagate_tags                     = "NONE"
    scheduling_strategy                = "REPLICA"
    tags_all                           = {}
    task_definition                    = "arn:aws:ecs:ap-northeast-1:081670647694:task-definition/api-task:2"
    triggers                           = {}
    wait_for_steady_state              = false

    deployment_circuit_breaker {
        enable   = false
        rollback = false
    }

    deployment_controller {
        type = "ECS"
    }

    load_balancer {
        container_name   = "api-container"
        container_port   = 8080
        target_group_arn = "arn:aws:elasticloadbalancing:ap-northeast-1:081670647694:targetgroup/api-tg/5dadebc9d02d6f6f"
    }

    network_configuration {
        assign_public_ip = false
        security_groups  = [
            "sg-0babb086f4bf78dc7",
        ]
        subnets          = [
            "subnet-071868ff6e16ab373",
            "subnet-0d341e73a69e6a832",
        ]
    }
}

# aws_ecs_task_definition.api_task:
resource "aws_ecs_task_definition" "api_task" {
    arn                      = "arn:aws:ecs:ap-northeast-1:081670647694:task-definition/api-task:2"
    arn_without_revision     = "arn:aws:ecs:ap-northeast-1:081670647694:task-definition/api-task"
    container_definitions    = jsonencode(
        [
            {
                environment    = []
                essential      = true
                image          = "081670647694.dkr.ecr.ap-northeast-1.amazonaws.com/toshihi-repository:latest"
                mountPoints    = []
                name           = "api-container"
                portMappings   = [
                    {
                        containerPort = 8080
                        hostPort      = 8080
                        protocol      = "tcp"
                    },
                ]
                systemControls = []
                volumesFrom    = []
            },
        ]
    )
    cpu                      = "256"
    enable_fault_injection   = false
    execution_role_arn       = "arn:aws:iam::081670647694:role/ecs-task-execution-role"
    family                   = "api-task"
    id                       = "api-task"
    memory                   = "512"
    network_mode             = "awsvpc"
    requires_compatibilities = [
        "FARGATE",
    ]
    revision                 = 2
    skip_destroy             = false
    tags_all                 = {}
    task_role_arn            = "arn:aws:iam::081670647694:role/ecs-task-execution-role"
    track_latest             = false
}

# aws_eip.nat_eip:
resource "aws_eip" "nat_eip" {
    allocation_id        = "eipalloc-0a48b70fe5342c60a"
    arn                  = "arn:aws:ec2:ap-northeast-1:081670647694:elastic-ip/eipalloc-0a48b70fe5342c60a"
    association_id       = "eipassoc-063e9e814a24c1a81"
    domain               = "vpc"
    id                   = "eipalloc-0a48b70fe5342c60a"
    network_border_group = "ap-northeast-1"
    network_interface    = "eni-008ed03b3c48edd66"
    private_dns          = "ip-10-0-0-13.ap-northeast-1.compute.internal"
    private_ip           = "10.0.0.13"
    public_dns           = "ec2-57-182-58-38.ap-northeast-1.compute.amazonaws.com"
    public_ip            = "57.182.58.38"
    public_ipv4_pool     = "amazon"
    tags                 = {
        "Name" = "nat-eip"
    }
    tags_all             = {
        "Name" = "nat-eip"
    }
    vpc                  = true
}

# aws_iam_role.ecs_task_execution_role:
resource "aws_iam_role" "ecs_task_execution_role" {
    arn                   = "arn:aws:iam::081670647694:role/ecs-task-execution-role"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ecs-tasks.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2025-05-13T06:33:46Z"
    force_detach_policies = false
    id                    = "ecs-task-execution-role"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "ecs-task-execution-role"
    path                  = "/"
    tags_all              = {}
    unique_id             = "AROARGA7TF6HMEI2OOOE2"
}

# aws_iam_role_policy_attachment.ecs_task_exec_policy:
resource "aws_iam_role_policy_attachment" "ecs_task_exec_policy" {
    id         = "ecs-task-execution-role-20250513063350338900000001"
    policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
    role       = "ecs-task-execution-role"
}

# aws_internet_gateway.igw:
resource "aws_internet_gateway" "igw" {
    arn      = "arn:aws:ec2:ap-northeast-1:081670647694:internet-gateway/igw-002349d7014168ad4"
    id       = "igw-002349d7014168ad4"
    owner_id = "081670647694"
    tags     = {
        "Name" = "my-internet-gateway"
    }
    tags_all = {
        "Name" = "my-internet-gateway"
    }
    vpc_id   = "vpc-0bed032613e7f106e"
}

# aws_lb.api_alb:
resource "aws_lb" "api_alb" {
    arn                                         = "arn:aws:elasticloadbalancing:ap-northeast-1:081670647694:loadbalancer/app/api-alb/7ccc56c77ed2e1bf"
    arn_suffix                                  = "app/api-alb/7ccc56c77ed2e1bf"
    client_keep_alive                           = 3600
    desync_mitigation_mode                      = "defensive"
    dns_name                                    = "api-alb-483344029.ap-northeast-1.elb.amazonaws.com"
    drop_invalid_header_fields                  = false
    enable_cross_zone_load_balancing            = true
    enable_deletion_protection                  = false
    enable_http2                                = true
    enable_tls_version_and_cipher_suite_headers = false
    enable_waf_fail_open                        = false
    enable_xff_client_port                      = false
    enable_zonal_shift                          = false
    id                                          = "arn:aws:elasticloadbalancing:ap-northeast-1:081670647694:loadbalancer/app/api-alb/7ccc56c77ed2e1bf"
    idle_timeout                                = 60
    internal                                    = false
    ip_address_type                             = "ipv4"
    load_balancer_type                          = "application"
    name                                        = "api-alb"
    preserve_host_header                        = false
    security_groups                             = [
        "sg-056d672144f6ba751",
    ]
    subnets                                     = [
        "subnet-0b26b6aee882837d7",
        "subnet-0f99e0b37871861c7",
    ]
    tags                                        = {
        "Name" = "api-alb"
    }
    tags_all                                    = {
        "Name" = "api-alb"
    }
    vpc_id                                      = "vpc-0bed032613e7f106e"
    xff_header_processing_mode                  = "append"
    zone_id                                     = "Z14GRHDCWA56QT"

    access_logs {
        enabled = false
    }

    connection_logs {
        enabled = false
    }

    subnet_mapping {
        subnet_id = "subnet-0b26b6aee882837d7"
    }
    subnet_mapping {
        subnet_id = "subnet-0f99e0b37871861c7"
    }
}

# aws_lb_listener.api_listener:
resource "aws_lb_listener" "api_listener" {
    arn                                  = "arn:aws:elasticloadbalancing:ap-northeast-1:081670647694:listener/app/api-alb/7ccc56c77ed2e1bf/74d94c90a763c4b3"
    id                                   = "arn:aws:elasticloadbalancing:ap-northeast-1:081670647694:listener/app/api-alb/7ccc56c77ed2e1bf/74d94c90a763c4b3"
    load_balancer_arn                    = "arn:aws:elasticloadbalancing:ap-northeast-1:081670647694:loadbalancer/app/api-alb/7ccc56c77ed2e1bf"
    port                                 = 80
    protocol                             = "HTTP"
    routing_http_response_server_enabled = false
    tags_all                             = {}

    default_action {
        order            = 1
        target_group_arn = "arn:aws:elasticloadbalancing:ap-northeast-1:081670647694:targetgroup/api-tg/5dadebc9d02d6f6f"
        type             = "forward"
    }
}

# aws_lb_target_group.api_tg:
resource "aws_lb_target_group" "api_tg" {
    arn                                = "arn:aws:elasticloadbalancing:ap-northeast-1:081670647694:targetgroup/api-tg/5dadebc9d02d6f6f"
    arn_suffix                         = "targetgroup/api-tg/5dadebc9d02d6f6f"
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:ap-northeast-1:081670647694:targetgroup/api-tg/5dadebc9d02d6f6f"
    ip_address_type                    = "ipv4"
    lambda_multi_value_headers_enabled = false
    load_balancer_arns                 = []
    load_balancing_algorithm_type      = "round_robin"
    load_balancing_anomaly_mitigation  = "off"
    load_balancing_cross_zone_enabled  = "use_load_balancer_configuration"
    name                               = "api-tg"
    port                               = 8080
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {
        "Name" = "api-target-group"
    }
    tags_all                           = {
        "Name" = "api-target-group"
    }
    target_type                        = "ip"
    vpc_id                             = "vpc-0bed032613e7f106e"

    health_check {
        enabled             = true
        healthy_threshold   = 2
        interval            = 30
        matcher             = "200"
        path                = "/"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 2
    }

    stickiness {
        cookie_duration = 86400
        enabled         = false
        type            = "lb_cookie"
    }

    target_failover {}

    target_group_health {
        dns_failover {
            minimum_healthy_targets_count      = "1"
            minimum_healthy_targets_percentage = "off"
        }
        unhealthy_state_routing {
            minimum_healthy_targets_count      = 1
            minimum_healthy_targets_percentage = "off"
        }
    }

    target_health_state {}
}

# aws_nat_gateway.nat_gw:
resource "aws_nat_gateway" "nat_gw" {
    allocation_id                      = "eipalloc-0a48b70fe5342c60a"
    association_id                     = "eipassoc-063e9e814a24c1a81"
    connectivity_type                  = "public"
    id                                 = "nat-0d0cb9b6a702296e8"
    network_interface_id               = "eni-008ed03b3c48edd66"
    private_ip                         = "10.0.0.13"
    public_ip                          = "57.182.58.38"
    secondary_allocation_ids           = []
    secondary_private_ip_address_count = 0
    secondary_private_ip_addresses     = []
    subnet_id                          = "subnet-0f99e0b37871861c7"
    tags                               = {
        "Name" = "nat-gateway"
    }
    tags_all                           = {
        "Name" = "nat-gateway"
    }
}

# aws_route_table.private:
resource "aws_route_table" "private" {
    arn              = "arn:aws:ec2:ap-northeast-1:081670647694:route-table/rtb-0f1b3d62bb2ff757c"
    id               = "rtb-0f1b3d62bb2ff757c"
    owner_id         = "081670647694"
    propagating_vgws = []
    route            = [
        {
            carrier_gateway_id         = ""
            cidr_block                 = "0.0.0.0/0"
            core_network_arn           = ""
            destination_prefix_list_id = ""
            egress_only_gateway_id     = ""
            gateway_id                 = ""
            ipv6_cidr_block            = ""
            local_gateway_id           = ""
            nat_gateway_id             = "nat-0d0cb9b6a702296e8"
            network_interface_id       = ""
            transit_gateway_id         = ""
            vpc_endpoint_id            = ""
            vpc_peering_connection_id  = ""
        },
    ]
    tags             = {
        "Name" = "private-route-table"
    }
    tags_all         = {
        "Name" = "private-route-table"
    }
    vpc_id           = "vpc-0bed032613e7f106e"
}

# aws_route_table.public:
resource "aws_route_table" "public" {
    arn              = "arn:aws:ec2:ap-northeast-1:081670647694:route-table/rtb-081019fa6e275cd78"
    id               = "rtb-081019fa6e275cd78"
    owner_id         = "081670647694"
    propagating_vgws = []
    route            = [
        {
            carrier_gateway_id         = ""
            cidr_block                 = "0.0.0.0/0"
            core_network_arn           = ""
            destination_prefix_list_id = ""
            egress_only_gateway_id     = ""
            gateway_id                 = "igw-002349d7014168ad4"
            ipv6_cidr_block            = ""
            local_gateway_id           = ""
            nat_gateway_id             = ""
            network_interface_id       = ""
            transit_gateway_id         = ""
            vpc_endpoint_id            = ""
            vpc_peering_connection_id  = ""
        },
    ]
    tags             = {
        "Name" = "public-route-table"
    }
    tags_all         = {
        "Name" = "public-route-table"
    }
    vpc_id           = "vpc-0bed032613e7f106e"
}

# aws_route_table_association.private_a:
resource "aws_route_table_association" "private_a" {
    id             = "rtbassoc-08e6817d5064095e7"
    route_table_id = "rtb-0f1b3d62bb2ff757c"
    subnet_id      = "subnet-0d341e73a69e6a832"
}

# aws_route_table_association.private_c:
resource "aws_route_table_association" "private_c" {
    id             = "rtbassoc-0d863a9dfea1fc556"
    route_table_id = "rtb-0f1b3d62bb2ff757c"
    subnet_id      = "subnet-071868ff6e16ab373"
}

# aws_route_table_association.public_a:
resource "aws_route_table_association" "public_a" {
    id             = "rtbassoc-0755051bf0a324a23"
    route_table_id = "rtb-081019fa6e275cd78"
    subnet_id      = "subnet-0f99e0b37871861c7"
}

# aws_route_table_association.public_c:
resource "aws_route_table_association" "public_c" {
    id             = "rtbassoc-0fcd6bc82b63807dc"
    route_table_id = "rtb-081019fa6e275cd78"
    subnet_id      = "subnet-0b26b6aee882837d7"
}

# aws_security_group.alb_sg:
resource "aws_security_group" "alb_sg" {
    arn                    = "arn:aws:ec2:ap-northeast-1:081670647694:security-group/sg-056d672144f6ba751"
    description            = "Allow HTTP from the internet"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-056d672144f6ba751"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 80
        },
    ]
    name                   = "alb-sg"
    owner_id               = "081670647694"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "alb-sg"
    }
    tags_all               = {
        "Name" = "alb-sg"
    }
    vpc_id                 = "vpc-0bed032613e7f106e"
}

# aws_security_group.ecs_sg:
resource "aws_security_group" "ecs_sg" {
    arn                    = "arn:aws:ec2:ap-northeast-1:081670647694:security-group/sg-0babb086f4bf78dc7"
    description            = "Allow traffic from ALB"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-0babb086f4bf78dc7"
    ingress                = [
        {
            cidr_blocks      = []
            description      = ""
            from_port        = 8080
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-056d672144f6ba751",
            ]
            self             = false
            to_port          = 8080
        },
    ]
    name                   = "ecs-sg"
    owner_id               = "081670647694"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "ecs-sg"
    }
    tags_all               = {
        "Name" = "ecs-sg"
    }
    vpc_id                 = "vpc-0bed032613e7f106e"
}

# aws_subnet.private_a:
resource "aws_subnet" "private_a" {
    arn                                            = "arn:aws:ec2:ap-northeast-1:081670647694:subnet/subnet-0d341e73a69e6a832"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "ap-northeast-1a"
    availability_zone_id                           = "apne1-az4"
    cidr_block                                     = "10.0.2.0/24"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0d341e73a69e6a832"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    owner_id                                       = "081670647694"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "private-subnet-a"
    }
    tags_all                                       = {
        "Name" = "private-subnet-a"
    }
    vpc_id                                         = "vpc-0bed032613e7f106e"
}

# aws_subnet.private_c:
resource "aws_subnet" "private_c" {
    arn                                            = "arn:aws:ec2:ap-northeast-1:081670647694:subnet/subnet-071868ff6e16ab373"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "ap-northeast-1c"
    availability_zone_id                           = "apne1-az1"
    cidr_block                                     = "10.0.3.0/24"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-071868ff6e16ab373"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    owner_id                                       = "081670647694"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "private-subnet-c"
    }
    tags_all                                       = {
        "Name" = "private-subnet-c"
    }
    vpc_id                                         = "vpc-0bed032613e7f106e"
}

# aws_subnet.public_a:
resource "aws_subnet" "public_a" {
    arn                                            = "arn:aws:ec2:ap-northeast-1:081670647694:subnet/subnet-0f99e0b37871861c7"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "ap-northeast-1a"
    availability_zone_id                           = "apne1-az4"
    cidr_block                                     = "10.0.0.0/24"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0f99e0b37871861c7"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = true
    owner_id                                       = "081670647694"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "public-subnet-a"
    }
    tags_all                                       = {
        "Name" = "public-subnet-a"
    }
    vpc_id                                         = "vpc-0bed032613e7f106e"
}

# aws_subnet.public_c:
resource "aws_subnet" "public_c" {
    arn                                            = "arn:aws:ec2:ap-northeast-1:081670647694:subnet/subnet-0b26b6aee882837d7"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "ap-northeast-1c"
    availability_zone_id                           = "apne1-az1"
    cidr_block                                     = "10.0.1.0/24"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0b26b6aee882837d7"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = true
    owner_id                                       = "081670647694"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "public-subnet-c"
    }
    tags_all                                       = {
        "Name" = "public-subnet-c"
    }
    vpc_id                                         = "vpc-0bed032613e7f106e"
}

# aws_vpc.main:
resource "aws_vpc" "main" {
    arn                                  = "arn:aws:ec2:ap-northeast-1:081670647694:vpc/vpc-0bed032613e7f106e"
    assign_generated_ipv6_cidr_block     = false
    cidr_block                           = "10.0.0.0/21"
    default_network_acl_id               = "acl-0556fcb5fa0f1b368"
    default_route_table_id               = "rtb-00336bafcd48bd943"
    default_security_group_id            = "sg-08d87eb45980d64bb"
    dhcp_options_id                      = "dopt-31e7bc56"
    enable_dns_hostnames                 = true
    enable_dns_support                   = true
    enable_network_address_usage_metrics = false
    id                                   = "vpc-0bed032613e7f106e"
    instance_tenancy                     = "default"
    ipv6_netmask_length                  = 0
    main_route_table_id                  = "rtb-00336bafcd48bd943"
    owner_id                             = "081670647694"
    tags                                 = {
        "Name" = "my-vpc"
    }
    tags_all                             = {
        "Name" = "my-vpc"
    }
}


Outputs:

igw_id = "igw-002349d7014168ad4"
vpc_id = "vpc-0bed032613e7f106e"
